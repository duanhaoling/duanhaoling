set nocompatible              " be iMproved, required
filetype off                  " required

"https://github.com/VundleVim/Vundle.Vim
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive' "添加git语法支持

Plugin 'vim-airline/vim-airline'
"vim-airline配置:优化vim界面"
"let g:airline#extensions#tabline#enabled = 1
" airline设置
" 显示颜色
set t_Co=256
set laststatus=2
" 使用powerline打过补丁的字体
let g:airline_powerline_fonts = 1
" 开启tabline
let g:airline#extensions#tabline#enabled = 1
" tabline中当前buffer两端的分隔字符
let g:airline#extensions#tabline#left_sep = ' '
" tabline中未激活buffer两端的分隔字符
let g:airline#extensions#tabline#left_alt_sep = ' '
" tabline中buffer显示编号
let g:airline#extensions#tabline#buffer_nr_show = 1
" 映射切换buffer的键位
nnoremap [b :bp<CR>
nnoremap ]b :bn<CR>
" 映射<leader>num到num buffer
map <leader>1 :b 1<CR>
map <leader>2 :b 2<CR>
map <leader>3 :b 3<CR>
map <leader>4 :b 4<CR>
map <leader>5 :b 5<CR>
map <leader>6 :b 6<CR>
map <leader>7 :b 7<CR>
map <leader>8 :b 8<CR>
map <leader>9 :b 9<CR>

" All of your Plugins mustd be added before the following line
" 自动补全，依赖python2
Plugin 'Valloric/YouCompleteMe'
" YouCompleteMe:语句补全插件
set completeopt=longest,menu "打开文件类型检测, 加了这句才可以用智能补全
set runtimepath+=~/.vim/bundle/YouCompleteMe
autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口"
let g:ycm_path_to_python_interpreter='/usr/local/bin/python' " python解释器路径
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0                            " 打开vim时不再询问是否加载ycm_extra_conf.py配置
let g:ycm_collect_identifiers_from_tags_files = 1           " 开启 YCM基于标签引擎
let g:syntastic_ignore_files=[".*\.py$"]
let g:ycm_seed_identifiers_with_syntax = 1                  " 语法关键字补全
let g:ycm_complete_in_comments = 1                          " 在注释输入中也能补全
let g:ycm_complete_in_strings = 1                           " 在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释和字符串中的文字也会被收入补全
let g:ycm_show_diagnostics_ui = 0                           " 禁用语法检查
let g:ycm_min_num_of_chars_for_completion=2                 " 从第2个键入字符就开始罗列匹配项
"补全后自动关机预览窗口"
let g:ycm_autoclose_preview_window_after_completion=1
" 禁止缓存匹配项,每次都重新生成匹配项"
let g:ycm_cache_omnifunc=0
" 回车即选中当前项
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "<CR>"             
"nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>     " 跳转到定义处
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
"上下左右键行为"
inoremap <expr> <Down>     pumvisible() ? '\<C-n>' : '\<Down>'
inoremap <expr> <Up>       pumvisible() ? '\<C-p>' : '\<Up>'
inoremap <expr> <PageDown> pumvisible() ? '\<PageDown>\<C-p>\<C-n>' : '\<PageDown>'
inoremap <expr> <PageUp>   pumvisible() ? '\<PageUp>\<C-p>\<C-n>' : '\<PageUp>'
"

"md文档的编辑与预览支持，tabular插件必须在vim-markdown之前
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown' 
Plugin 'suan/vim-instant-markdown'
"md文件编辑的相关配置
let g:vim_markdown_folding_disabled = 1 "不折叠显示,默认是折叠显示,看个人习惯
let g:vim_markdown_override_foldtext = 0
let g:vim_markdown_folding_level = 6 "可折叠的级数,对应md的标题级别
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_emphasis_multiline = 0
set conceallevel=2
let g:vim_markdown_frontmatter=1
syntax on "必须设置,否则md标记不能高亮显示 
let g:mkdp_path_to_chrome = '/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome'


" vim-scripts 中的插件 "
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'taglist.vim'
"ctags 配置:F3快捷键显示程序中的各种tags，包括变量和函数等。
map <F3> :TlistToggle<CR>
""let Tlist_Auto_Open=1 "默认打开taglist
let Tlist_Use_Right_Window=1 "在右侧窗口中显示taglist窗口
let Tlist_Show_One_File=1  "不同时显示多个文件的tag，只显示当前文件的 
let Tlist_Exit_OnlyWindow=1 "如果taglist窗口是最后一个窗口，则退出vim 
let Tlist_WinWidt=25
 
Plugin 'The-NERD-tree'
Plugin 'jistr/vim-nerdtree-tabs'
"NERDTree 配置:F2快捷键显示当前目录树
"let NERDTreeWinPos='right'
map <F2> :NERDTreeToggle<CR>
" 关闭NERDTree快捷键,参考https://www.jianshu.com/p/3066b3191cb1
"map <leader>t :NERDTreeToggle<CR>
" 显示行号
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=1
" 设置宽度
let NERDTreeWinSize=30
" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 显示书签列表
let NERDTreeShowBookmarks=1
Plugin 'Xuyuanp/nerdtree-git-plugin'
"在NERDTree 中显示git信息
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }



"indentLine是一款缩进指示线，由纯字符实现，效果比较完美。
""开启以后导致md文档中的链接无法正确展开，编辑md文件需要关闭
"Plugin 'indentLine.vim'
"缩进指示线"
"let g:indentLine_char='┆'
"let g:indentLine_enabled = 1
"
"自动缩进
"Plugin 'vim-scripts/indentpython.vim'
"
"autopep8自动格式化工具，在Normal模式输入:Autopep8或按F8就可以自动依照pep8的标准自动格式化代码。
Plugin 'tell-k/vim-autopep8' 
"autopep8设置"
let g:autopep8_disable_show_diff=1
"
"符号自动补全,按", 自动补全,按 shift-tab, 跳到补全的符号后面, 还是insert-mode
Plugin 'delimitMate.vim'
" for python docstring ", 特别有用
au FileType python let b:delimitMate_nesting_quotes = ['"']
" 关闭某些类型文件的自动补全
"au FileType mail let b:delimitMate_autoclose = 0
"
"
"方便写注释，快捷键设为F4
Plugin 'scrooloose/nerdcommenter'
"需要注意的是nerdcommenter的leader默认为"\",一般可以用下面的命令更改：
let mapleader=','
map <F4> <leader>ci <CR>
"多行注释只需要在normal模式下按v并移动光标选择需要注释的行，再按F4就可以为所有选中的行添加注释。
"Plugin 'L9'
"语法高亮支持
Plugin 'scrooloose/syntastic'

"还可以通过这个小巧的插件，添加PEP8代码风格检查
"Plugin 'nvie/vim-flake8'
"
"配色方案
"Plugin 'jnurmine/Zenburn'
"
"超级搜索按Ctrl+P就可以进行搜索,它不仅仅可以搜索文件，还能检索标签!
Plugin 'kien/ctrlp.vim'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'

" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'

" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}


"最早安装的插件,先于插件管理器vundleVim
"Plugin 'vim-powerline'
"Plugin 'nerdtree'
"Plugin 'powerline/powerline'
"Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
"Plugin 'scrooloose/nerdtree'


call vundle#end()            " required
filetype plugin indent on    " required 加载vim自带和插件相应的语法和文件类型相关脚本
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - 列出所有已配置的插件
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件
"
" 查阅 :h vundle 获取更多细节和wiki以及FAQ
" Put your non-Plugin stuff after this line

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""新文件标题
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"新建.c,.h,.sh,.java文件，自动插入文件头 
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" 
""定义函数SetTitle，自动插入文件头 
func SetTitle() 
        "如果文件类型为.sh文件 
        if &filetype == 'sh' 
                call setline(1, "##########################################################################") 
                call append(line("."), "# File Name: ".expand("%")) 
                call append(line(".")+1, "# Author: ldh") 
                call append(line(".")+2, "# mail: lingduanhao@gmail.com") 
                call append(line(".")+3, "# Created Time: ".strftime("%c")) 
                call append(line(".")+4, "#########################################################################") 
                call append(line(".")+5, "#!/bin/zsh")
                call append(line(".")+6, "PATH=/home/edison/bin:/home/edison/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/ga
mes:/snap/bin:/work/tools/gcc-3.4.5-glibc-2.3.6/bin")
                call append(line(".")+7, "export PATH")
                call append(line(".")+8, "")
        else 
                call setline(1, "/*************************************************************************") 
                call append(line("."), "        > File Name: ".expand("%")) 
                call append(line(".")+1, "      > Author:ldh") 
                call append(line(".")+2, "      > Mail:lingduanhao@gmail.com ") 
                call append(line(".")+3, "      > Created Time: ".strftime("%c")) 
                call append(line(".")+4, " ************************************************************************/") 
                call append(line(".")+5, "")
        endif
        if &filetype == 'cpp'
                call append(line(".")+6, "#include<iostream>")
        call append(line(".")+7, "using namespace std;")
                call append(line(".")+8, "")
        endif
        if &filetype == 'c'
                call append(line(".")+6, "#include<stdio.h>")
                call append(line(".")+7, "")
        endif
        "       if &filetype == 'java'
        "               call append(line(".")+6,"public class ".expand("%"))
        "               call append(line(".")+7,"")
        "       endif
        "新建文件后，自动定位到文件末尾
        autocmd BufNewFile * normal G
endfunc 

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"通用设置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syn on                      "语法支持
 
"common conf {{             "通用配置 
set ai                      "自动缩进
set bs=2                    "在insert 模式下用退格键删除
set showmatch               "代码匹配
set laststatus=2            "总是显示状态行
set expandtab               "以下三个配置配合使用，设置tab和缩进空格数
set shiftwidth=4            
set tabstop=4 
set smartindent
set softtabstop=4
set cursorline              "为光标所在行加下划线
set number                  "显示行号
set autoread                "文件在vim之外使用过，自动重新读入
set autowrite               "自动保存

"set ignorecase              "检索时忽略大小写
set ignorecase smartcase    "包含大写字母的时候不忽略大小写，只有小写字母时忽略
set fileencodings=utf-8,gbk "使用utf-8或gbk打开文件
set encoding=utf-8
set hls                     "检索时高亮显示匹配项
set helplang=cn             "帮助系统设置为中文
"set foldmethod=syntax       "代码折叠
set foldenable              " 开始折叠
set foldmethod=syntax       " 设置语法折叠
set foldcolumn=0            " 设置折叠区域的宽度
setlocal foldlevel=1        " 设置折叠层数为
set foldlevelstart=99       " 打开文件是默认不折叠代码
set mouse=a                 "启动对鼠标的支持，双击标签挑战，见:help
set clipboard=unnamed       "共享剪贴板  

"set foldclose=all          " 设置为自动关闭折叠                
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
                            " 用空格键来开关折叠
"}}    
   
" conf for tabs 为标签页进行的配置，通过ctrl h/l 切换标签等
let mapleader =','
nnoremap <C-l> gt
nnoremap <C-h> gT
nnoremap <leader>t :tabe<CR>

"状态栏的配置
"powerline{
set guifont=PowerlineSymbols\ for\ Powerline 
set nocompatible
set t_Co=256
"let g:Powerline_symbols ='fancy'
let g:Powerline_symbols='compatible'
"} 

"解决termux下的vim汉字乱码
"set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
"set enc=utf8
"set fencs=utf8,gbk,gb2312,gb18030

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Settings For PYTHON
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Quickly Run
"""""""""""""""""""""""""
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
        exec "w"
        if &filetype == 'c'
                exec "!g++ % -o %<"
                exec "!time ./%<"
        elseif &filetype == 'cpp'
                exec "!g++ % -o %<"
                exec "!time ./%<"
        elseif &filetype == 'sh'
                :!time bash %
        elseif &filetype == 'python'
                exec "!time python3 %"
        elseif &filetype == 'java'
                exec "!javac %"
                exec "!java %<"
        endif
endfunc
"按F4运行python"
"map <F4> :Autopep8<CR> :w<CR> :call RunPython()<CR>
"function RunPython()
    "let mp = &makeprg
    "let ef = &errorformat
    "let exeFile = expand("%:t")
    "setlocal makeprg=python\ -u
    "set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
    "silent make %
    "copen
    "let &makeprg = mp
    "let &errorformat = ef
"endfunction
"那个Python自动执行有点bug, 执行后显示执行结果在quick-fix里面, 但是源代码窗口的内容却不见了, 只需要在map后面加个redraw!即可。


"C,C++的调试
map <F8> :call Rungdb()<CR>
func! Rungdb()
    exec "w"
    exec "!g++ % -g -o %<"
    exec "!gdb ./%<"
endfunc

let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

let python_highlight_all=1

"python with virtualenv support
"py << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
    "project_base_dir = os.environ['VIRTUAL_ENV']
    "activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    "execfile(activate_this, dict(__file__=activate_this))
"EOF


au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |

"标示不必要的空白字符,这里会报错
"我们希望避免出现多余的空白字符。可以让Vim帮我们标示出来，使其很容易发现并删除
"au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"键盘命令
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <leader>w :w!<cr>
nmap <leader>f :find<cr>

" 映射全选+复制 ctrl+a
map <C-A> ggVGY
map! <C-A> <Esc>ggVGY
map <F12> gg=G
" 选中状态下 Ctrl+c 复制
vmap <C-c> "+y
map lv 0v$


"比较文件  
nnoremap <C-F2> :vert diffsplit 
"新建标签  
map <F9> :tabnew .<CR>  
"打开树状文件目录  
map <C-F9> \be  
"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

